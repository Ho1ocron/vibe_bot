from aiogram import F, Router
from aiogram.enums.chat_type import ChatType
from aiogram.fsm.context import FSMContext
from aiogram.filters import(
    Command, 
    CommandStart, 
    CommandObject,
)
from aiogram.types import(
    Message, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    FSInputFile
)
from states import WaitForText
from settings import get_maps_path, CODE
import logging


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router(name=__name__)
router.message.filter(F.chat.type.in_({ChatType.PRIVATE}),)


@router.message(Command(commands=["start"]))
async def start(message: Message, state: FSMContext) -> None:
    await state.clear()
    keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ö—É–¥–∞ –∏–¥—Ç–∏?", callback_data="go"), 
            InlineKeyboardButton(text="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")
        ],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ]
)
    
    await message.answer(
        (
            f"üëã <b>–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –î—Ä—É–≥!</b> üëã\n\n"
            f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –Ω–æ–≤–æ–º –∫–∞–º–ø—É—Å–µ –ò–†–ò–¢-–†—Ç–§ –£—Ä–§–£ –≤ –ù–æ–≤–æ–∫–æ–ª—å—Ü–æ–≤—Å–∫–æ–º.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: "
        ), reply_markup=keyboard
    )

@router.message(WaitForText.waiting_for_text, ~F.text.startswith("/"))
async def process_user_text(message: Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–π—Ç–∏ (–∫ –ø—Ä–∏–º–µ—Ä—É –†-1):"
    ) 
    await state.clear()
    await state.set_state(WaitForText.waiting_for_second)


@router.message(WaitForText.waiting_for_second, ~F.text.startswith("/"))
async def send_map(message: Message, state: FSMContext):
    user_text = message.text.strip()

    try:
        photo_path = await get_maps_path(user_text)
        photo = FSInputFile(photo_path)

        await message.answer_photo(photo=photo)
        await message.answer(text=(
            "–£ –≤—Ö–æ–¥–∞ –≤ –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å QR-code.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ –µ–≥–æ –±–æ—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏ –±–∞–ª–ª."
        ))

        # await message.answer(f"‚úÖ –í—ã –≤–≤–µ–ª–∏: {user_text}")
    except (ValueError, FileNotFoundError) as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    await state.clear()
    await state.set_state(WaitForText.waiting_for_code)


@router.message(WaitForText.waiting_for_code, ~F.text.startswith("/"))
async def code_reaction(message: Message, state: FSMContext) -> None:
    if message.text == CODE:
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –±–∞–ª–ª.")
        await state.clear()
        return
    await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –∫–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    